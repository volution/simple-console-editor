#!/dev/null








:: sources / run / python2 / editor :: exec -- "${ZRUN[@]}" ':: sources / run / *' python2 editor "${@}"
:: sources / run / python2 / pager :: exec -- "${ZRUN[@]}" ':: sources / run / *' python2 pager "${@}"

:: sources / run / python3 / editor :: exec -- "${ZRUN[@]}" ':: sources / run / *' python3 editor "${@}"
:: sources / run / python3 / pager :: exec -- "${ZRUN[@]}" ':: sources / run / *' python3 pager "${@}"


--<< sources / run / *
	test "${#}" -ge 1 ; _python="${1}" ; shift -- 1
	test "${#}" -ge 1 ; _main="${1}" ; shift -- 1
	test -f "./sources/exec_${_main}.py"
	
	case "${_python}" in
		( python2 )
			_python_executable="$( type -P -- python2 )"
			_python_arguments=(
					-u # unbuffered `stdin` and `stdout`
					-O -O # optimizations enabled
					-B # disable writing `*.py[oc]`
					-E # ignore `PYTHON*` environment variables
					-S # disable `sys.path` manipulation
					-s # disable user-site
					-R # hash randomization
				)
		;;
		( python3 )
			_python_executable="$( type -P -- python3 )"
			_python_arguments=(
					-u # unbuffered `stdin` and `stdout`
					-O -O # optimizations enabled
					-B # disable writing `*.py[oc]`
					-E # ignore `PYTHON*` environment variables
					-S # disable `sys.path` manipulation
					-s # disable user-site
					-b # warn about `str` and `bytes` mixes
				)
		;;
		( * )
			printf -- '[ee]  invalid python `%s`;  aborting!\n' "${_python}" >&2
			exit -- 1
		;;
	esac
	
	exec -- "${_python_executable}" \
			"${_python_arguments[@]}" \
			"./sources/exec_${_main}.py" \
			"${@}" \
	#
!!








:: bundle / run / editor :: exec -- "${ZRUN[@]}" ':: bundle / run / *' editor "${@}"
:: bundle / run / pager :: exec -- "${ZRUN[@]}" ':: bundle / run / *' pager "${@}"

:: bundle / build / editor :: exec -- "${ZRUN[@]}" ':: bundle / build / *' editor "${@}"
:: bundle / build / pager :: exec -- "${ZRUN[@]}" ':: bundle / build / *' pager "${@}"


--<< bundle / run / *
	test "${#}" -ge 1 ; _main="${1}" ; shift -- 1
	"${ZRUN[@]}" ':: bundle / build / *' "${_main}"
	exec -- "./.outputs/${_main}--bundle.zip" "${@}"
!!


--<< bundle / build / *
	
	test "${#}" -ge 1 ; _main="${1}" ; shift -- 1
	
	_compress=true
	
	test "${#}" -eq 0
	test -d ./.outputs
	test -f "./sources/exec_${_main}.py"
	
	"${ZRUN[@]}" ':: sources / embedded / hash'
	
	_bundle_sources="$( readlink -m -- "./.outputs/${_main}--bundle.sources" )"
	_bundle_zip="$( readlink -m -- "./.outputs/${_main}--bundle.zip" )"
	
	if test -e "${_bundle_zip}" ; then
		mv -T -- "${_bundle_zip}" "${_bundle_zip}.old"
	fi
	
	if test ! -e "${_bundle_sources}" ; then
		mkdir -- "${_bundle_sources}"
	fi
	
	rsync \
			-a \
			--delete \
			--exclude '/__main__.py' \
			-- \
			./sources/ \
			"${_bundle_sources}/" \
	#
	
	if test ! -e "${_bundle_sources}/__main__.py" ; then
		ln -s -T -- \
				"./exec_${_main}.py" \
				"${_bundle_sources}/__main__.py" \
		#
	fi
	
	_build_target=release
	_build_number="$( exec -- cat -- ./sources/sce_embedded/build/number.txt )"
	_build_version="$( exec -- cat -- ./sources/sce_embedded/build/version.txt )"
	_build_timestamp="$( exec -- cat -- ./sources/sce_embedded/build/timestamp.txt )"
	_build_sources_hash="$( exec -- cat -- ./sources/sce_embedded/build/sources.hash )"
	_build_git_hash="$( exec -- cat -- ./.outputs/markers/build-git-hash.txt )"
	
	sed -r \
			-e 's#@\{SCE_BUILD_TARGET}#'"${_build_target}"'#' \
			-e 's#@\{SCE_BUILD_NUMBER}#'"${_build_number}"'#' \
			-e 's#@\{SCE_BUILD_VERSION}#'"${_build_version}"'#' \
			-e 's#@\{SCE_BUILD_TIMESTAMP}#'"${_build_timestamp}"'#' \
			-e 's#@\{SCE_BUILD_SOURCES_HASH}#'"${_build_sources_hash}"'#' \
			-e 's#@\{SCE_BUILD_GIT_HASH}#'"${_build_git_hash}"'#' \
		< "${_bundle_sources}/sce_embedded/embedded.py" \
		> "${_bundle_sources}/sce_embedded/embedded.py.tmp" \
	#
	
	mv -T -- \
			"${_bundle_sources}/sce_embedded/embedded.py.tmp" \
			"${_bundle_sources}/sce_embedded/embedded.py" \
	#
	
	_touch_timestamp="${_build_timestamp//-/}"
	_touch_timestamp="${_touch_timestamp:0:12}.${_touch_timestamp:12:14}"
	find "${_bundle_sources}/" -exec touch -t "${_touch_timestamp}" -- {} +
	
	python2 -u -O -O -B -E -S -s -R -m compileall -q -- "${_bundle_sources}"
	
	if test "${_compress}" == true ; then
		find "${_bundle_sources}/" -xtype f -name '*.py' -delete
	fi
	
	_touch_timestamp="${_build_timestamp//-/}"
	_touch_timestamp="${_touch_timestamp:0:12}.${_touch_timestamp:12:14}"
	find "${_bundle_sources}/" -exec touch -c -t "${_touch_timestamp}" -- {} +
	
	if test -e "${_bundle_zip}.tmp.1" ; then
		rm -- "${_bundle_zip}.tmp.1"
	fi
	if test -e "${_bundle_zip}.tmp.2" ; then
		rm -- "${_bundle_zip}.tmp.2"
	fi
	
	_zip_level="-0"
	if test "${_compress}" == true ; then
		_zip_level="-9"
	fi
	
	execline-cd "${_bundle_sources}" \
		find . -xtype f -print \
	| LC_ALL=C sort \
	| execline-cd "${_bundle_sources}" \
		zip \
			"${_zip_level}" \
			-q \
			-o \
			-X \
			"${_bundle_zip}.tmp.1" \
			-@ \
	#
	
	_python_arguments=(
			-u # unbuffered `stdin` and `stdout`
			-O -O # optimizations enabled
			-B # disable writing `*.py[oc]`
			-E # ignore `PYTHON*` environment variables
			-S # disable `sys.path` manipulation
			-s # disable user-site
			-R # hash randomization
		)
	
	cat -- \
			<( printf '#!/usr/bin/env -S python2 %s\n' "${_python_arguments[*]}" ) \
			"${_bundle_zip}.tmp.1" \
		> "${_bundle_zip}.tmp.2" \
	#
	
	chmod +x -- "${_bundle_zip}.tmp.2"
	
	rm -- "${_bundle_zip}.tmp.1"
	
	mv -T -- "${_bundle_zip}.tmp.2" "${_bundle_zip}.new"
	
	if test ! -e "${_bundle_zip}.old" ; then
		mv -T -- "${_bundle_zip}.new" "${_bundle_zip}"
	elif ! cmp -s -- "${_bundle_zip}.new" "${_bundle_zip}.old" ; then
		mv -T -- "${_bundle_zip}.new" "${_bundle_zip}"
		rm -- "${_bundle_zip}.old"
	else
		mv -T -- "${_bundle_zip}.old" "${_bundle_zip}"
		rm -- "${_bundle_zip}.new"
	fi
!!








<< sources / embedded / hash
	
	test "${#}" -eq 0
	
	if test -e ./.git ; then
		_git_hash="$( exec -- git rev-parse HEAD )"
		if ! git diff --quiet || ! git diff --quiet --cached ; then
			_git_hash+="-uncommitted"
		fi
	else
		_git_hash='unknown'
	fi
	
	execline-cd ./sources \
	find . \
			-type f \
			-not -path './sce_embedded/build/*' \
			-printf '%P\0' \
	| LC_ALL=C sort -z \
		>| ./.outputs/markers/build-sources.list.tmp \
	#
	
	execline-cd ./sources \
	xargs -0 -I {} -- md5sum -b -z -- {} \
		< ./.outputs/markers/build-sources.list.tmp \
	| tr '\0' '\n' \
		>| ./.outputs/markers/build-sources.md5.tmp \
	#
	
	md5sum -b \
		< ./.outputs/markers/build-sources.md5.tmp \
	| cut -f 1 -d ' ' \
		>| ./.outputs/markers/build-sources.hash.tmp \
	#
	
	if ! cmp -s -- ./.outputs/markers/build-sources.hash.tmp ./sources/sce_embedded/build/sources.hash ; then
		
		_build_number="$( exec -- cat -- ./sources/sce_embedded/build/number.txt )"
		_build_number="$(( _build_number + 1 ))"
		_build_timestamp="$( exec -- date -- '+%Y-%m-%d-%H-%M-%S' )"
		
		printf -- '%d\n' "${_build_number}" >| ./sources/sce_embedded/build/number.txt.tmp
		printf -- '%s\n' "${_build_timestamp}" >| ./sources/sce_embedded/build/timestamp.txt.tmp
		
		mv -T -- ./sources/sce_embedded/build/number.txt.tmp ./sources/sce_embedded/build/number.txt
		mv -T -- ./sources/sce_embedded/build/timestamp.txt.tmp ./sources/sce_embedded/build/timestamp.txt
		
		mv -T -- ./.outputs/markers/build-sources.list.tmp ./.outputs/markers/build-sources.list
		
		mv -T -- ./.outputs/markers/build-sources.md5.tmp ./sources/sce_embedded/build/sources.md5
		mv -T -- ./.outputs/markers/build-sources.hash.tmp ./sources/sce_embedded/build/sources.hash
		
	else
		
		rm -- ./.outputs/markers/build-sources.list.tmp
		rm -- ./.outputs/markers/build-sources.md5.tmp
		rm -- ./.outputs/markers/build-sources.hash.tmp
	fi
	
	printf -- '%s\n' "${_git_hash}" >| ./.outputs/markers/build-git-hash.txt.tmp
	mv -T -- ./.outputs/markers/build-git-hash.txt.tmp ./.outputs/markers/build-git-hash.txt
!!








<< workspace / initialize
	
	test "${#}" -eq 0
	
	"${ZRUN[@]}" ':: workspace / initialize / outputs'
	"${ZRUN[@]}" ':: workspace / initialize / python'
!!


<< workspace / initialize / python
	
	test "${#}" -eq 0
	
	_outputs="$( exec -- readlink -e -- ./.outputs )"
	_sources="$( exec -- readlink -e -- ./sources )"
	
	_markers="${_outputs}/markers"
	
	for _folder in  "${_markers}" ; do
		if test ! -e "${_folder}" ; then
			mkdir -- "${_folder}"
		fi
	done
!!


<< workspace / initialize / outputs
	
	test "${#}" -eq 0
	
	if test ! -d ./.outputs ; then
		_outputs_store="${TMPDIR:-/tmp}/sce--${UID}--${RANDOM}-${RANDOM}-${RANDOM}-${RANDOM}"
		mkdir -- "${_outputs_store}"
		_outputs_store="$( exec -- readlink -e -- "${_outputs_store}" )"
		ln -s -f -T -- "${_outputs_store}" ./.outputs
	fi
!!








:: deploy / rsync / editor :: exec -- "${ZRUN[@]}" ':: deploy / rsync / *' portable editor "${@}"
:: deploy / rsync / pager :: exec -- "${ZRUN[@]}" ':: deploy / rsync / *' portable pager "${@}"


--<< deploy / rsync / *
	test "${#}" -eq 3 ; _os="${1}" ; _main="${2}" ; _target="${3}" ; shift -- 3
	"${ZRUN[@]}" ':: deploy / release' "${_os}" "${_main}"
	_source="./.outputs/${_main}--release--${_os}"
	printf -- '[ii]  deploying `%s` to `%s`...\n' "${_main}" "${_target}" >&2
	exec -- rsync -i -t -p --chmod=0555 -- "${_source}" "${_target}"
!!




--<< deploy / release
	if test "${#}" -ge 1 ; then
		_os_0="${1}"
		shift -- 1
	else
		_os_0='all'
	fi
	if test "${#}" -ge 1 ; then
		_main_0="${1}"
		shift -- 1
	else
		_main_0=all
	fi
	test "${#}" -eq 0
	if test "${__DEPLOY_NORELEASE:-}" == true ; then
		exit -- 0
	fi
	for _main in editor pager ; do
		if test "${_main_0}" != all -a "${_main_0}" != "${_main}" ; then
			continue
		fi
		"${ZRUN[@]}" ':: bundle / build / *' "${_main}"
		for _os in portable linux darwin freebsd openbsd ; do
			if test "${_os_0}" != all -a "${_os_0}" != "${_os}" ; then
				continue
			fi
			cp -p -T -- \
					"./.outputs/${_main}--bundle.zip" \
					"./.outputs/${_main}--release--${_os}" \
			#
		done
	done
!!




<< deploy / publish
	
	if test "${#}" -eq 0 ; then
		_main_0=all
	else
		_main_0="${1}"
		shift -- 1
	fi
	
	test "${#}" -eq 0
	
	test -d ./.publish/
	
	
	"${ZRUN[@]}" ':: sources / embedded / hash'
	
	
	_build_version="$( exec -- cat -- ./sources/sce_embedded/build/version.txt )"
	case "${_build_version}" in
		( 0.0.0 | *.0 )
			_build_release=false
			_build_suffix='--preview'
		;;
		( * )
			_build_release=true
			_build_suffix=''
		;;
	esac
	
	
	if test "${_build_release}" == true ; then
		for _main in editor pager ; do
			if test "${_main_0}" != all -a "${_main_0}" != "${_main}" ; then
				continue
			fi
			for _os in portable linux darwin freebsd openbsd ; do
				if test -e "./.publish/${_os}/${_main}--${_os}--v${_build_version}${_build_suffix}" ; then
					printf -- '[ee]  release already exists for `%s` for `%s`!\n' "${_main}" "${_os}" >&2
					exit -- 1
				fi
			done
		done
	fi
	
	
	if ! git diff --quiet ; then
		printf -- '[ee]  dirty repository (before build);  aborting!\n' >&2
		exit -- 1
	fi
	if ! git diff --cached --quiet ; then
		printf -- '[ee]  dirty repository (before build);  aborting!\n' >&2
		exit -- 1
	fi
	
	
	printf -- '[ii]  releasing all for `%s`...\n' "${_build_version}${_build_suffix}" >&2
	
	"${ZRUN[@]}" ':: deploy / release' all "${_main_0}"
	
	
	if ! git diff --quiet ; then
		printf -- '[ee]  dirty repository (after build);  aborting!\n' >&2
		exit -- 1
	fi
	if ! git diff --cached --quiet ; then
		printf -- '[ee]  dirty repository (after build);  aborting!\n' >&2
		exit -- 1
	fi
	
	
	printf -- '[ii]  tagging and pushing for `%s`...\n' "${_build_version}${_build_suffix}" >&2
	printf -- '[--]\n' >&2
	
	if test "${_build_release}" == true ; then
		git tag --sign -m "[release]  Release \`v${_build_version}\`." -- "v${_build_version}" HEAD
	else
		git tag --sign -m "[preview]  Preview \`v${_build_version}\`." --force -- preview HEAD
	fi
	
	"${ZRUN[@]}" ':: github / push'
	
	printf -- '[--]\n' >&2
	
	
	printf -- '[ii]  publishing all for `%s`...\n' "${_build_version}${_build_suffix}" >&2
	
	for _os in portable linux darwin freebsd openbsd ; do
		for _main in editor pager ; do
			
			if test "${_main_0}" != all -a "${_main_0}" != "${_main}" ; then
				continue
			fi
			
			printf -- '[ii]  publishing `%s` for `%s` for `%s`...\n' "${_main}" "${_os}" "${_build_version}${_build_suffix}" >&2
			printf -- '[--]\n' >&2
			
		#!	if test -f "./.publish/${_os}/${_main}--${_os}--v${_build_version}${_build_suffix}.asc" ; then
		#!		rm -- "./.publish/${_os}/${_main}--${_os}--v${_build_version}${_build_suffix}.asc"
		#!	fi
			
			rsync -i -t -p --chmod=0555 -- \
					"./.outputs/${_main}--release--${_os}" \
					"./.publish/${_os}/${_main}--${_os}--v${_build_version}${_build_suffix}" \
			#
			
			if test -e "./.publish/${_os}/${_main}--${_os}--v${_build_version}${_build_suffix}.asc" ; then
				if ! gpg2 --verify -- \
						"./.publish/${_os}/${_main}--${_os}--v${_build_version}${_build_suffix}.asc" \
						< /dev/null > /dev/null 2> /dev/null \
				; then
					rm -- "./.publish/${_os}/${_main}--${_os}--v${_build_version}${_build_suffix}.asc"
				fi
			fi
			
			if test ! -e "./.publish/${_os}/${_main}--${_os}--v${_build_version}${_build_suffix}.asc" ; then
				for _retry in 1 2 3 4 ; do
					if gpg2 --sign --detach-sign --armor \
							--default-key 58FC2194FCC2478399CB220C5A974037A6FD8839 \
							--output "./.publish/${_os}/${_main}--${_os}--v${_build_version}${_build_suffix}.asc" \
							-- "./.publish/${_os}/${_main}--${_os}--v${_build_version}${_build_suffix}" \
					; then break ; fi
				done
			fi
			
			gpg2 --verify \
					-- "./.publish/${_os}/${_main}--${_os}--v${_build_version}${_build_suffix}.asc" \
			#
			
			if test "${_build_release}" == true ; then
				ln -s -T -f -- "./${_main}--${_os}--v${_build_version}${_build_suffix}" "./.publish/${_os}/${_main}${_build_suffix}"
				ln -s -T -f -- "./${_main}--${_os}--v${_build_version}${_build_suffix}.asc" "./.publish/${_os}/${_main}${_build_suffix}.asc"
			fi
			
			printf -- '[--]\n' >&2
		done
	done
	
	
	printf -- '[ii]  publishing all for `%s` (on GitHub)...\n' "${_build_version}${_build_suffix}" >&2
	
	for _os in portable linux darwin freebsd openbsd ; do
		for _main in editor pager ; do
			
			if test "${_main_0}" != all -a "${_main_0}" != "${_main}" ; then
				continue
			fi
			
			printf -- '[ii]  publishing `%s` for `%s` for `%s` (on GitHub)...\n' "${_main}" "${_os}" "${_build_version}${_build_suffix}" >&2
			
			if test "${_build_release}" == true ; then
				gh release upload --clobber -- "v${_build_version}" \
						"./.publish/${_os}/${_main}--${_os}--v${_build_version}${_build_suffix}" \
						"./.publish/${_os}/${_main}--${_os}--v${_build_version}${_build_suffix}.asc" \
				#
			else
				gh release upload --clobber -- preview \
						"./.publish/${_os}/${_main}--${_os}--v${_build_version}${_build_suffix}" \
						"./.publish/${_os}/${_main}--${_os}--v${_build_version}${_build_suffix}.asc" \
				#
			fi
			
		done
	done
!!








&&?? _/.local.z-run

